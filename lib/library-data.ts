import type {
  Site,
  User,
  Vendor,
  DeviceType,
  ChecklistItem,
  BaseVendor,
  UseCase,
  TestMatrixEntry,
  Requirement,
  TestCase,
  Task,
  Region,
  Country,
} from "./database"

// --- USERS ---
export const mockUsers: User[] = [
  {
    id: 1,
    name: "Alex Rivera",
    email: "alex.rivera@example.com",
    role: "Senior Project Manager",
    user_type: "project_manager",
  },
  {
    id: 2,
    name: "Marcus Chen",
    email: "marcus.chen@example.com",
    role: "Project Manager",
    user_type: "project_manager",
  },
  {
    id: 7,
    name: "Charlie Brown",
    email: "charlie.b@example.com",
    role: "Technical Owner",
    user_type: "technical_owner",
  },
  { id: 8, name: "Diana Prince", email: "diana.p@example.com", role: "Technical Owner", user_type: "technical_owner" },
  { id: 9, name: "Admin User", email: "admin@example.com", role: "Admin", user_type: "admin" },
]

// --- GEOGRAPHY ---
export const initialRegions: Region[] = [
  { id: 1, name: "North America" },
  { id: 2, name: "EMEA" },
  { id: 3, name: "APAC" },
  { id: 4, name: "LATAM" },
  { id: 5, name: "Africa" },
]

export const mockCountries: Country[] = [
  { name: "United States", code: "US" },
  { name: "Canada", code: "CA" },
  { name: "Mexico", code: "MX" },
  { name: "United Kingdom", code: "GB" },
  { name: "Germany", code: "DE" },
  { name: "France", code: "FR" },
  { name: "South Africa", code: "ZA" },
  { name: "Nigeria", code: "NG" },
  { name: "Japan", code: "JP" },
  { name: "China", code: "CN" },
  { name: "India", code: "IN" },
  { name: "Australia", code: "AU" },
  { name: "Brazil", code: "BR" },
  { name: "Argentina", code: "AR" },
]

// --- VENDORS & DEVICES ---
export const initialWiredVendors: Vendor[] = [
  { id: 1, name: "Cisco", type: "wired" },
  { id: 2, name: "Juniper", type: "wired" },
  { id: 3, name: "Arista", type: "wired" },
  { id: 4, name: "HPE/Aruba", type: "wired" },
  { id: 5, name: "Extreme Networks", type: "wired" },
  { id: 6, name: "Dell", type: "wired" },
]

export const initialWirelessVendors: Vendor[] = [
  { id: 14, name: "Cisco/Meraki", type: "wireless" },
  { id: 15, name: "HPE/Aruba", type: "wireless" },
  { id: 16, name: "Ubiquiti", type: "wireless" },
  { id: 17, name: "Ruckus (CommScope)", type: "wireless" },
  { id: 18, name: "Juniper Mist", type: "wireless" },
  { id: 19, name: "Extreme Networks", type: "wireless" },
]

export const initialFirewallVendors: BaseVendor[] = [
  { id: 1, name: "Palo Alto Networks" },
  { id: 2, name: "Fortinet" },
  { id: 3, name: "Cisco" },
  { id: 4, name: "Check Point" },
]

export const initialVpnVendors: BaseVendor[] = [
  { id: 1, name: "Cisco AnyConnect" },
  { id: 2, name: "Palo Alto GlobalProtect" },
  { id: 3, name: "FortiClient" },
]

export const initialEdrXdrVendors: BaseVendor[] = [
  { id: 1, name: "CrowdStrike Falcon" },
  { id: 2, name: "Microsoft Defender for Endpoint" },
  { id: 3, name: "SentinelOne" },
]

export const initialSiemVendors: BaseVendor[] = [
  { id: 1, name: "Splunk" },
  { id: 2, name: "Microsoft Sentinel" },
  { id: 3, name: "IBM QRadar" },
]

export const initialIdpVendors: BaseVendor[] = [
  { id: 1, name: "Microsoft Entra ID" },
  { id: 2, name: "Okta" },
  { id: 3, name: "Ping Identity" },
]

export const initialMfaVendors: BaseVendor[] = [
  { id: 1, name: "Duo Security" },
  { id: 2, name: "Microsoft Authenticator" },
  { id: 3, name: "Okta Verify" },
]

export const initialDeviceTypes: DeviceType[] = [
  { id: 1, name: "Windows" },
  { id: 2, name: "macOS" },
  { id: 3, name: "iOS" },
  { id: 4, name: "Android" },
  { id: 5, name: "Linux" },
  { id: 6, name: "Surveillance Camera" },
  { id: 7, name: "IP Phone" },
  { id: 8, name: "Printer" },
  { id: 9, name: "Neatbar" },
]

// --- REQUIREMENTS ---
export const initialRequirements: Requirement[] = [
  {
    id: "FR-01",
    type: "Functional",
    description: "Support 802.1X authentication for wired and wireless",
    justification: "Ensures authenticated network access for corporate devices",
    status: "Met",
  },
  {
    id: "FR-02",
    type: "Functional",
    description: "Provide RADIUS server functionality with RADSec support",
    justification: "Enables secure, cloud-based authentication",
    status: "Met",
  },
  {
    id: "FR-03",
    type: "Functional",
    description: "Issue and manage client certificates",
    justification: "Enables secure certificate-based identification",
    status: "Met",
  },
  {
    id: "FR-04",
    type: "Functional",
    description: "Certificate solution supports SCEP and Intune MDM",
    justification: "Intune manages certificate profiles",
    status: "Met",
  },
  {
    id: "FR-05",
    type: "Functional",
    description: "Private PKI supports CDP Methods (CRL, OCSP)",
    justification: "Certificate verification and revocation checking",
    status: "Met",
  },
  {
    id: "FR-06",
    type: "Functional",
    description: "Support MAC Authentication Bypass (MAB)",
    justification: "Allows non-802.1X device access",
    status: "Met",
  },
  {
    id: "FR-07",
    type: "Functional",
    description: "Enable dynamic VLAN assignment",
    justification: "Supports logical segmentation",
    status: "Met",
  },
  {
    id: "FR-08",
    type: "Functional",
    description: "Provide centralized policy management",
    justification: "Ensures consistent enforcement globally",
    status: "Met",
  },
  {
    id: "FR-09",
    type: "Functional",
    description: "Offer guest onboarding",
    justification: "Enables secure guest access",
    status: "Met",
  },
  {
    id: "FR-10",
    type: "Functional",
    description: "Support BYOD use cases",
    justification: "Allows personal device access",
    status: "Met",
  },
  {
    id: "FR-11",
    type: "Functional",
    description: "Integrate with identity providers",
    justification: "Enables user-based policies",
    status: "Met",
  },
  {
    id: "FR-12",
    type: "Functional",
    description: "Integration with Splunk via Syslog",
    justification: "Supports security monitoring",
    status: "Met",
  },
  {
    id: "FR-13",
    type: "Functional",
    description: "Identify and block rogue devices",
    justification: "Device profiling and port security",
    status: "Met",
  },
  {
    id: "NFR-01",
    type: "Non-Functional",
    description: "100% cloud-delivered and managed",
    justification: "Reduces on-premises infrastructure",
    status: "Met",
  },
  {
    id: "NFR-02",
    type: "Non-Functional",
    description: "High availability across global regions",
    justification: "Ensures reliable access control",
    status: "Met",
  },
  {
    id: "NFR-03",
    type: "Non-Functional",
    description: "Scalable to support all sites",
    justification: "Supports global rollout",
    status: "Met",
  },
  {
    id: "NFR-04",
    type: "Non-Functional",
    description: "Minimal operational overhead",
    justification: "Reduces complexity",
    status: "Met",
  },
  {
    id: "NFR-05",
    type: "Non-Functional",
    description: "Secure communication protocols",
    justification: "Ensures traffic confidentiality",
    status: "Met",
  },
  {
    id: "NFR-06",
    type: "Non-Functional",
    description: "Fast provisioning processes",
    justification: "Improves user experience",
    status: "Met",
  },
  {
    id: "NFR-07",
    type: "Non-Functional",
    description: "Splunk integration",
    justification: "Regulatory compliance",
    status: "Met",
  },
  {
    id: "NFR-08",
    type: "Non-Functional",
    description: "Cisco Meraki compatibility",
    justification: "Seamless deployment",
    status: "Met",
  },
  {
    id: "NFR-09",
    type: "Non-Functional",
    description: "Global vendor support",
    justification: "Timely assistance across zones",
    status: "Met",
  },
]

// --- USE CASES ---
export const initialUseCases: UseCase[] = [
  {
    id: "UC1",
    title: "CA-MDM-SOE",
    description:
      "Certificate deployment and lifecycle management via built-in CA for Entra ID users and Intune managed endpoints",
    requirements: ["FR-03", "NFR-06"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "Requires configuration of Portnox internal CA with SCEP integration",
  },
  {
    id: "UC2.1",
    title: "Corp WiFi Auth (User Certs)",
    description: "802.1X certificate-based authentication for corporate SSID using user certificates",
    requirements: ["FR-01", "FR-02", "FR-03", "NFR-08"],
    scope: "Mandatory",
    portnox_status: true,
    notes: "Validated with Meraki MR Wireless AP",
  },
  {
    id: "UC2.2",
    title: "Corp WiFi Auth (Machine Certs)",
    description: "802.1X certificate-based authentication for corporate SSID using machine certificates",
    requirements: ["FR-01", "FR-02", "FR-03", "NFR-08"],
    scope: "Mandatory",
    portnox_status: true,
    notes: "Validated with Meraki MR Wireless AP",
  },
  {
    id: "UC3.1",
    title: "Corp Wired Auth (User Certs)",
    description: "802.1X certificate-based authentication for corporate VLAN using user certificates",
    requirements: ["FR-01", "FR-02", "FR-03", "NFR-08"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "Requires Meraki MS Switch configuration",
  },
  {
    id: "UC3.2",
    title: "Corp Wired Auth (Machine Certs)",
    description: "802.1X certificate-based authentication for corporate VLAN using machine certificates",
    requirements: ["FR-01", "FR-02", "FR-03", "NFR-08"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "Requires Meraki MS Switch configuration",
  },
  {
    id: "UC4",
    title: "BYOD/Mobile WiFi Auth",
    description: "Username/password authentication for unmanaged endpoints on BYOD SSID",
    requirements: ["FR-01", "FR-02", "FR-03", "FR-10", "NFR-08"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "Internet-only access with restricted permissions",
  },
  {
    id: "UC5",
    title: "Guest WiFi Auth",
    description: "Captive portal or PSK authentication for guest users",
    requirements: ["FR-01", "FR-02", "FR-03", "FR-09", "NFR-08"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "Restricted internet-only access",
  },
  {
    id: "UC6.1",
    title: "Corp Wired Posture Auth",
    description: "Agentless posture assessment for wired 802.1X connections",
    requirements: ["FR-04", "FR-05"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "~1hr sync time for Intune compliance score",
  },
  {
    id: "UC6.2",
    title: "Corp WiFi Posture Auth",
    description: "Agentless posture assessment for wireless 802.1X connections",
    requirements: ["FR-04", "FR-05"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "Validates Intune compliance status",
  },
  {
    id: "UC7.1",
    title: "Corp Wired Posture Remediation",
    description: "Failed posture check places device in Guest VLAN for remediation",
    requirements: ["FR-04", "FR-05"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "Re-auth to correct VLAN after remediation",
  },
  {
    id: "UC7.2",
    title: "Corp WiFi Posture Remediation",
    description: "Failed posture check places device in Guest SSID for remediation",
    requirements: ["FR-04", "FR-05"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "Re-auth to correct SSID after remediation",
  },
  {
    id: "UC8.1",
    title: "Corp Wired CoA",
    description: "Change of Authorization for failed cert auth on wired",
    requirements: ["FR-04", "FR-05"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "Requires UDP 3799 from Portnox to NAS",
  },
  {
    id: "UC8.2",
    title: "Corp WiFi CoA",
    description: "Change of Authorization for failed cert auth on wireless",
    requirements: ["FR-04", "FR-05"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "Dynamic VLAN reassignment",
  },
  {
    id: "UC9",
    title: "Corp Wired MAB Profile",
    description: "MAC Authentication Bypass with device profiling for non-802.1X devices",
    requirements: ["FR-06"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "Level 1 vs Level 2 DHCP fingerprinting",
  },
  {
    id: "UC10",
    title: "Standardize Switch Port Config",
    description: "Dynamic VLAN assignment based on NAC policy",
    requirements: ["FR-07", "FR-08"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "Simplifies port configuration management",
  },
  {
    id: "UC11",
    title: "Rogue AP/Switch Detection",
    description: "Detect and disable ports with unauthorized network devices",
    requirements: ["FR-13"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "Port security integration required",
  },
  {
    id: "UC12",
    title: "Security Controls",
    description: "Dynamic ACL and group policy application",
    requirements: ["FR-07", "FR-08"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "Firewall policy integration",
  },
  {
    id: "UC13",
    title: "Logging and Reporting",
    description: "Syslog/Splunk integration for all NAC events",
    requirements: ["FR-12", "NFR-07"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "CEF format support required",
  },
  {
    id: "UC14",
    title: "SSO RBAC for Admin",
    description: "SSO with MFA for Portnox administrators",
    requirements: ["FR-11", "NFR-04"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "SSO available, group-based roles pending",
  },
  {
    id: "UC15",
    title: "MDM Integration",
    description: "Intune device visibility and sync in Portnox",
    requirements: ["FR-03", "FR-11"],
    scope: "Mandatory",
    portnox_status: false,
    notes: "Auto-removal of deleted devices",
  },
  {
    id: "UC16",
    title: "RADIUS Server/Proxy",
    description: "HA and caching with secure TLS communication",
    requirements: ["FR-02", "NFR-02", "NFR-05"],
    scope: "Mandatory",
    portnox_status: true,
    notes: "Local RADIUS proxy deployment required",
  },
]

// --- TEST CASES ---
export const initialTestCases: TestCase[] = [
  {
    id: "TC01",
    name: "Deploy Machine Certificate",
    description: "Deploy machine certificate to managed endpoint during EUC enrollment",
    expected_outcome: "Endpoint connects to guest/default network initially",
    status: "Pass",
  },
  {
    id: "TC02",
    name: "Deploy User Certificate",
    description: "User logs on to obtain valid user certificate after initial guest connection",
    expected_outcome: "Endpoint connects to correct network based on user profile",
    status: "Pass",
  },
  {
    id: "TC03.1",
    name: "Expired/Revoked Machine Cert",
    description: "Test behavior with revoked or expired machine certificate",
    expected_outcome: "Endpoint placed in guest/default network for remediation",
    status: "WIP",
  },
  {
    id: "TC03.2",
    name: "Remediate Machine Certificate",
    description: "Re-comply endpoint with valid machine certificate",
    expected_outcome: "Endpoint connects to correct network based on profile",
    status: "WIP",
  },
  {
    id: "TC04.1",
    name: "Expired/Revoked User Cert",
    description: "Test behavior with revoked or expired user certificate",
    expected_outcome: "Endpoint placed in guest network for certificate rectification",
    status: "WIP",
  },
  {
    id: "TC04.2",
    name: "Remediate User Certificate",
    description: "Update user with valid certificate",
    expected_outcome: "Endpoint connects to correct network based on profile",
    status: "WIP",
  },
  {
    id: "TC05.1",
    name: "User Password Expire",
    description: "Test expired password preventing network logon",
    expected_outcome: "Endpoint placed in guest network for password reset",
    status: "WIP",
  },
  {
    id: "TC05.2",
    name: "Remediate Password Expired",
    description: "User resolves password issue and logs on",
    expected_outcome: "Endpoint connects to correct network",
    status: "WIP",
  },
  {
    id: "TC06.1",
    name: "User Account Lockout",
    description: "Test locked account preventing network access",
    expected_outcome: "Endpoint placed in guest network",
    status: "WIP",
  },
  {
    id: "TC06.2",
    name: "Account Lockout Restored",
    description: "User resolves lockout and logs on successfully",
    expected_outcome: "Endpoint connects to correct network",
    status: "WIP",
  },
  {
    id: "TC07.1",
    name: "MAB Authentication & Profile",
    description: "Validate MAC address and profile parameters",
    expected_outcome: "Endpoint connects to correct VLAN",
    status: "Pass",
  },
  {
    id: "TC07.2",
    name: "MAB Failed Profile",
    description: "Valid MAC but failed profile parameters",
    expected_outcome: "Endpoint placed in guest/default VLAN",
    status: "WIP",
  },
]

// --- TEST MATRIX ---
export const initialTestMatrix: TestMatrixEntry[] = [
  {
    id: "TM-WIN-1",
    platform: "Windows",
    mode: "Agentless (SCEP+Intune)",
    connection_type: "Wired",
    test_8021x: "Passed",
    manual_block: "Block on reconnect only",
    acl_test: "Passed",
    dacl_test: "Passed",
    risk_detection: "Passed",
    block_action: "Block on reconnect only",
    notes: "China users need proxy script disabled",
  },
  {
    id: "TM-WIN-2",
    platform: "Windows",
    mode: "Agentless (SCEP+Intune)",
    connection_type: "Wireless",
    test_8021x: "Passed",
    manual_block: "Block on reconnect only",
    acl_test: "Failed",
    dacl_test: "Failed",
    risk_detection: "Passed",
    block_action: "Block on reconnect only",
    notes: "ACL/dACL under investigation. Real-time block requires CoA",
  },
  {
    id: "TM-WIN-3",
    platform: "Windows",
    mode: "AgentP + Intune",
    connection_type: "Wired",
    test_8021x: "Passed",
    manual_block: "Block on reconnect only",
    acl_test: "Passed",
    dacl_test: "Passed",
    risk_detection: "Risk attributes identified",
    block_action: "Block on reconnect only",
    notes: "All risk attributes available",
  },
  {
    id: "TM-WIN-4",
    platform: "Windows",
    mode: "AgentP + Intune",
    connection_type: "Wireless",
    test_8021x: "Passed",
    manual_block: "Block on reconnect only",
    acl_test: "Failed",
    dacl_test: "Failed",
    risk_detection: "Risk attributes identified",
    block_action: "Block on reconnect only",
    notes: "ACL/dACL under investigation. All risk attributes available",
  },
  {
    id: "TM-MAC-1",
    platform: "macOS",
    mode: "Agentless (SCEP+Jamf)",
    connection_type: "Wired",
    test_8021x: "Passed",
    manual_block: "Block on reconnect only",
    acl_test: "Passed",
    dacl_test: "Passed",
    risk_detection: "Failed",
    notes: "Risk detection under investigation. Aruba NAS using Local Radius",
  },
  {
    id: "TM-MAC-2",
    platform: "macOS",
    mode: "Agentless (SCEP+Jamf)",
    connection_type: "Wireless",
    test_8021x: "Passed",
    manual_block: "Block on reconnect only",
    acl_test: "Failed",
    dacl_test: "Failed",
    risk_detection: "Failed",
    notes: "ACL/dACL/Risk under investigation. Cisco switch connected to Docker Radius",
  },
  {
    id: "TM-MAC-3",
    platform: "macOS",
    mode: "AgentP + Jamf",
    connection_type: "Wired",
    test_8021x: "Failed",
    notes: "AgentP deployment issue. Jamf Case#CS1303012 open",
  },
  {
    id: "TM-MAC-4",
    platform: "macOS",
    mode: "AgentP + Jamf",
    connection_type: "Wireless",
    test_8021x: "Failed",
    notes: "AgentP deployment issue. Jamf Case#CS1303012 open",
  },
  {
    id: "TM-IOS-1",
    platform: "iOS/iPadOS",
    mode: "Agentless (SCEP+Intune)",
    connection_type: "Wireless",
    test_8021x: "Passed",
    manual_block: "Block on reconnect only",
    acl_test: "Failed",
    risk_detection: "In Progress",
    notes: "ACL under investigation. SCEP deployed but SSID-NAC not found",
  },
  {
    id: "TM-IOS-2",
    platform: "iOS/iPadOS",
    mode: "AgentP + Intune",
    connection_type: "Wireless",
    test_8021x: "Failed",
    notes: "Policy blocks config file. AgentP requires background execution",
  },
  {
    id: "TM-SPEC-1",
    platform: "Special",
    mode: "Detection",
    connection_type: "Wired",
    notes: "Rogue Devices switched to Guest VLAN 999 as expected",
  },
  {
    id: "TM-SPEC-2",
    platform: "Special",
    mode: "Detection",
    connection_type: "Wireless",
    notes: "Rogue Devices switched to Guest VLAN 999 as expected",
  },
  {
    id: "TM-SPEC-3",
    platform: "Special",
    mode: "MAB",
    connection_type: "Wired",
    notes: "MAC-based (Neatbar) device profiled correctly to PROD VLAN 34",
  },
]

// --- CHECKLIST ---
export const initialChecklistItems: ChecklistItem[] = [
  {
    id: "CHK-INF-1",
    category: "Infrastructure",
    item: "Meraki MR Wireless APs configured",
    status: "Not Started",
    notes: "Required for UC2.1, UC2.2",
  },
  {
    id: "CHK-INF-2",
    category: "Infrastructure",
    item: "Meraki MS Switches configured",
    status: "Not Started",
    notes: "Required for UC3.1, UC3.2",
  },
  {
    id: "CHK-INF-3",
    category: "Infrastructure",
    item: "Local RADIUS proxy deployed",
    status: "Not Started",
    notes: "Docker-based deployment",
  },
  {
    id: "CHK-INF-4",
    category: "Infrastructure",
    item: "Firewall rules configured (UDP 1812/1813, 3799)",
    status: "Not Started",
    notes: "CoA requires UDP 3799",
  },
  {
    id: "CHK-IDM-1",
    category: "Identity & MDM",
    item: "Entra ID integration configured",
    status: "Not Started",
    notes: "API permissions required",
  },
  {
    id: "CHK-IDM-2",
    category: "Identity & MDM",
    item: "Intune integration configured",
    status: "Not Started",
    notes: "SCEP profiles ready",
  },
  {
    id: "CHK-IDM-3",
    category: "Identity & MDM",
    item: "Jamf integration configured",
    status: "Not Started",
    notes: "macOS management",
  },
  {
    id: "CHK-CERT-1",
    category: "Certificate Services",
    item: "Portnox CA configured",
    status: "Not Started",
    notes: "Internal CA setup",
  },
  {
    id: "CHK-CERT-2",
    category: "Certificate Services",
    item: "SCEP/NDES configured",
    status: "Not Started",
    notes: "Certificate enrollment",
  },
  {
    id: "CHK-CERT-3",
    category: "Certificate Services",
    item: "CRL/OCSP configured",
    status: "Not Started",
    notes: "Certificate validation",
  },
  {
    id: "CHK-MON-1",
    category: "Monitoring",
    item: "Splunk syslog receiver configured",
    status: "Not Started",
    notes: "CEF format support",
  },
  {
    id: "CHK-MON-2",
    category: "Monitoring",
    item: "Alerting rules defined",
    status: "Not Started",
    notes: "Security events",
  },
]

// --- TASKS ---
export const initialTasks: Task[] = [
  { id: 1, name: "Project Kickoff Meeting", description: "Initial meeting with all stakeholders.", status: "To Do" },
  { id: 2, name: "Configure Cloud Tenant", description: "Set up Portnox Cloud tenant.", status: "To Do" },
  { id: 3, name: "Integrate with IdP", description: "Connect to Entra ID/Okta.", status: "To Do" },
  { id: 4, name: "Deploy On-Premise Components", description: "Deploy AD Broker/Local RADIUS.", status: "To Do" },
  { id: 5, name: "Configure Network Access Policies", description: "Define auth policies.", status: "To Do" },
  { id: 6, name: "Pilot Group Testing", description: "Onboard pilot users/devices.", status: "To Do" },
  { id: 7, name: "User Acceptance Testing (UAT)", description: "Conduct formal UAT.", status: "To Do" },
  { id: 8, name: "Production Rollout", description: "Begin phased rollout.", status: "To Do" },
]

// --- SITES (Sample Data) ---
export let mockSites: Site[] = [
  {
    id: "HQ001",
    name: "Global Headquarters",
    region: "North America",
    country: "United States",
    status: "In Progress",
    phase: 1,
    users_count: 2500,
    planned_start: "2025-08-01",
    planned_end: "2025-10-31",
    completion_percent: 35,
    project_manager_id: 1,
    technical_owner_ids: [7],
    radsec: "Native",
    vendor_ids: [1, 14],
    firewall_vendor_ids: [1],
    vpn_vendor_ids: [2],
    edr_xdr_vendor_ids: [2],
    siem_vendor_ids: [2],
    idp_vendor_ids: [1],
    mfa_vendor_ids: [2],
    device_type_ids: [1, 2],
    checklist_item_ids: ["CHK-IDM-1", "CHK-IDM-2"],
    use_case_ids: ["UC1", "UC2.1", "UC2.2"],
    tasks: [],
    test_case_statuses: [{ test_case_id: "TC01", status: "Pass" }],
    requirement_statuses: [{ requirement_id: "FR-01", status: "Met" }],
    created_at: "2025-07-01T00:00:00Z",
    updated_at: "2025-07-15T00:00:00Z",
  },
]

// Functions to manipulate the data for the session
export const clearMockSites = () => {
  mockSites.length = 0
}

export const loadMockSites = () => {
  // This is a simplified way to reset. In a real app, you'd deep copy.
  mockSites = [
    {
      id: "HQ001",
      name: "Global Headquarters",
      region: "North America",
      country: "United States",
      status: "In Progress",
      phase: 1,
      users_count: 2500,
      planned_start: "2025-08-01",
      planned_end: "2025-10-31",
      completion_percent: 35,
      project_manager_id: 1,
      technical_owner_ids: [7],
      radsec: "Native",
      vendor_ids: [1, 14],
      firewall_vendor_ids: [1],
      vpn_vendor_ids: [2],
      edr_xdr_vendor_ids: [2],
      siem_vendor_ids: [2],
      idp_vendor_ids: [1],
      mfa_vendor_ids: [2],
      device_type_ids: [1, 2],
      checklist_item_ids: ["CHK-IDM-1", "CHK-IDM-2"],
      use_case_ids: ["UC1", "UC2.1", "UC2.2"],
      tasks: [],
      test_case_statuses: [{ test_case_id: "TC01", status: "Pass" }],
      requirement_statuses: [{ requirement_id: "FR-01", status: "Met" }],
      created_at: "2025-07-01T00:00:00Z",
      updated_at: "2025-07-15T00:00:00Z",
    },
  ]
}
